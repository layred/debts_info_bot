version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: ./compose/Dockerfile.prod
    image: tg_web_prod
    container_name: tg_web_prod
    command: /start-django
    restart: on-failure
    stdin_open: true
    tty: true
    expose:
      - 8000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=Host(`localhost`)"
    volumes:
      - .:/app
    env_file:
      - ./.env/.prod.env
    depends_on:
      - db
      - redis

  tg_bot:
    build:
      context: .
      dockerfile: ./compose/Dockerfile.prod
    image: tg_bot_prod
    container_name: tg_bot_prod
    command: /start-bot
    restart: always
    volumes:
      - .:/app
    env_file:
      - ./.env/.prod.env
    depends_on:
      - db
      - redis

  db:
    image: postgres:13.3
    container_name: tg_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: "debts_info_bot"
      POSTGRES_PASSWORD: "debts_info_bot"
      POSTGRES_DB: "debts_info_bot_prod"
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U debts_info_bot -d debts_info_bot_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: tg_redis
    volumes:
      - redis-data:/data

  celery_worker:
    build:
      context: .
      dockerfile: ./compose/Dockerfile.prod
    image: tg_celeryworker
    container_name: tg_celeryworker
    command: /start-worker
    restart: on-failure
    volumes:
      - .:/app
    env_file:
      - ./.env/.prod.env
    depends_on:
      - redis
      - db

  celery_beat:
    build:
      context: .
      dockerfile: ./compose/Dockerfile.prod
    image: tg_celerybeat
    container_name: tg_celerybeat
    command: /start-beat
    restart: on-failure
    volumes:
      - .:/app
    env_file:
      - ./.env/.prod.env
    depends_on:
      - redis
      - db

  traefik:
    image: traefik:latest
    container_name: tg_traefik
    ports:
      - 8008:80
      - 8081:8080
    volumes:
      - "$PWD/compose/traefik.toml:/etc/traefik/traefik.toml"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

volumes:
  redis-data:
  postgres_data:
